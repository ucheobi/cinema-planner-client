/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Availability: "AVAILABLE" | "CANCELLED" | "POSTPONED"
  MovieGenres: "ACTION" | "COMEDY" | "CRIME" | "DRAMA" | "HORROR" | "ROMANCE" | "SciFi" | "THRILLER"
  Role: "ADMIN" | "USER"
  SeatType: "NORMAL" | "VIP" | "VVIP"
  TicketType: "COUPLES" | "FAMILY" | "SINGLE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Movie: { // root type
    availability: NexusGenEnums['Availability']; // Availability!
    cost: number; // Float!
    date: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    duration: string; // String!
    genre: NexusGenEnums['MovieGenres']; // MovieGenres!
    id: number; // Int!
    time: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    url: string; // String!
  }
  Mutation: {};
  Query: {};
  Seat: { // root type
    id: number; // Int!
    seatNumber: number; // Int!
    seatPosition: NexusGenEnums['SeatType']; // SeatType!
    ticket?: NexusGenRootTypes['Ticket'] | null; // Ticket
  }
  Ticket: { // root type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    ticketType: NexusGenRootTypes['Ticket']; // Ticket!
    totalCost: number; // Float!
  }
  User: { // root type
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    password: string; // String!
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Movie: { // field return type
    availability: NexusGenEnums['Availability']; // Availability!
    cost: number; // Float!
    date: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    duration: string; // String!
    genre: NexusGenEnums['MovieGenres']; // MovieGenres!
    id: number; // Int!
    tickets: Array<NexusGenRootTypes['Ticket'] | null>; // [Ticket]!
    time: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    url: string; // String!
  }
  Mutation: { // field return type
    bookTicket: NexusGenRootTypes['Ticket']; // Ticket!
    createMovie: NexusGenRootTypes['Movie']; // Movie!
    deleteMovie: NexusGenRootTypes['Movie']; // Movie!
    deleteTicket: NexusGenRootTypes['Ticket']; // Ticket!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    updateMovie: NexusGenRootTypes['Movie']; // Movie!
    updateTicket: NexusGenRootTypes['Ticket']; // Ticket!
  }
  Query: { // field return type
    movie: NexusGenRootTypes['Movie']; // Movie!
    movies: NexusGenRootTypes['Movie'][]; // [Movie!]!
    ticket: NexusGenRootTypes['Ticket']; // Ticket!
    tickets: NexusGenRootTypes['Ticket'][]; // [Ticket!]!
  }
  Seat: { // field return type
    id: number; // Int!
    seatNumber: number; // Int!
    seatPosition: NexusGenEnums['SeatType']; // SeatType!
    ticket: NexusGenRootTypes['Ticket'] | null; // Ticket
  }
  Ticket: { // field return type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    movieId: NexusGenRootTypes['Movie']; // Movie!
    owner: NexusGenRootTypes['User'] | null; // User
    seat: NexusGenRootTypes['Seat'] | null; // Seat
    ticketType: NexusGenRootTypes['Ticket']; // Ticket!
    totalCost: number; // Float!
  }
  User: { // field return type
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    password: string; // String!
    role: NexusGenEnums['Role']; // Role!
    tickets: NexusGenRootTypes['Ticket'][]; // [Ticket!]!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Movie: { // field return type name
    availability: 'Availability'
    cost: 'Float'
    date: 'DateTime'
    description: 'String'
    duration: 'String'
    genre: 'MovieGenres'
    id: 'Int'
    tickets: 'Ticket'
    time: 'DateTime'
    title: 'String'
    url: 'String'
  }
  Mutation: { // field return type name
    bookTicket: 'Ticket'
    createMovie: 'Movie'
    deleteMovie: 'Movie'
    deleteTicket: 'Ticket'
    login: 'AuthPayload'
    signup: 'AuthPayload'
    updateMovie: 'Movie'
    updateTicket: 'Ticket'
  }
  Query: { // field return type name
    movie: 'Movie'
    movies: 'Movie'
    ticket: 'Ticket'
    tickets: 'Ticket'
  }
  Seat: { // field return type name
    id: 'Int'
    seatNumber: 'Int'
    seatPosition: 'SeatType'
    ticket: 'Ticket'
  }
  Ticket: { // field return type name
    active: 'Boolean'
    createdAt: 'DateTime'
    email: 'String'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    movieId: 'Movie'
    owner: 'User'
    seat: 'Seat'
    ticketType: 'Ticket'
    totalCost: 'Float'
  }
  User: { // field return type name
    email: 'String'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    password: 'String'
    role: 'Role'
    tickets: 'Ticket'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    bookTicket: { // args
      active: boolean; // Boolean!
      createdAt: string; // String!
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      movieId: number; // Int!
      seatNumber: number; // Int!
      seatPosition: NexusGenEnums['SeatType'] | null; // SeatType
      ticketType: NexusGenEnums['TicketType'] | null; // TicketType
      totalCost: number; // Float!
    }
    createMovie: { // args
      availability: NexusGenEnums['Availability'] | null; // Availability
      cost: number; // Float!
      date: string; // String!
      description: string; // String!
      duration: string; // String!
      genre: NexusGenEnums['MovieGenres'] | null; // MovieGenres
      time: string; // String!
      title: string; // String!
      url: string; // String!
    }
    deleteMovie: { // args
      id: string; // ID!
    }
    deleteTicket: { // args
      id: string; // ID!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      password: string; // String!
      role: NexusGenEnums['Role'] | null; // Role
    }
    updateMovie: { // args
      availability?: NexusGenEnums['Availability'] | null; // Availability
      cost?: number | null; // Float
      date?: string | null; // String
      description?: string | null; // String
      duration?: string | null; // String
      genre?: string | null; // String
      id: string; // ID!
      time?: string | null; // String
      title?: string | null; // String
      url?: string | null; // String
    }
    updateTicket: { // args
      active?: boolean | null; // Boolean
      createdAt?: string | null; // String
      email?: string | null; // String
      firstName?: string | null; // String
      id: string; // ID!
      lastName?: string | null; // String
      movieId?: string | null; // ID
      ticketType: NexusGenEnums['TicketType'] | null; // TicketType
      totalCost?: number | null; // Float
    }
  }
  Query: {
    movie: { // args
      id: string; // ID!
    }
    ticket: { // args
      id: number; // Int!
    }
  }
  Ticket: {
    movieId: { // args
      movieId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}